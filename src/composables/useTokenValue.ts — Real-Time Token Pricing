// src/composables/useTokenValue.ts

import { ref, onMounted } from 'vue';
import axios from 'axios';
import { getTokenMetadata } from './useTokenMetadata';

interface TokenPrice {
  symbol: string;
  priceUsd: number;
}

export const tokenPrices = ref<Map<string, TokenPrice>>(new Map());

const COINGECKO_API_URL = 'https://api.coingecko.com/api/v3/simple/price';
const SPL_TOKEN_API_URL = 'https://quote-api.jup.ag/v1/price';

/**
 * Fetch token price from CoinGecko
 */
async function fetchPriceFromCoinGecko(symbol: string): Promise<number | null> {
  try {
    const response = await axios.get(`${COINGECKO_API_URL}?ids=${symbol}&vs_currencies=usd`);
    return response.data[symbol]?.usd ?? null;
  } catch (error) {
    console.error(`Error fetching price for ${symbol} from CoinGecko`, error);
    return null;
  }
}

/**
 * Fetch SPL token price from Jupiter Aggregator (if not available on CoinGecko)
 */
async function fetchPriceFromJupiter(mint: string): Promise<number | null> {
  try {
    const response = await axios.get(`${SPL_TOKEN_API_URL}?ids=${mint}`);
    return response.data.data?.[0]?.price ?? null;
  } catch (error) {
    console.error(`Error fetching price for ${mint} from Jupiter`, error);
    return null;
  }
}

/**
 * Get token price and cache it.
 */
async function fetchTokenPrice(mint: string, symbol: string) {
  // Check CoinGecko first
  let priceUsd = await fetchPriceFromCoinGecko(symbol.toLowerCase());

  // Fallback to Jupiter if not found in CoinGecko
  if (priceUsd === null) {
    priceUsd = await fetchPriceFromJupiter(mint);
  }

  if (priceUsd !== null) {
    tokenPrices.value.set(mint, { symbol, priceUsd });
  }
}

/**
 * Automatically fetch all token prices when the app is initialized.
 */
async function fetchAllTokenPrices() {
  // Fetch prices for all tokens the user holds
  for (const token of tokenBalances.value) {
    const metadata = getTokenMetadata(token.mint);
    if (metadata) {
      await fetchTokenPrice(token.mint, metadata.symbol);
    }
  }
}

onMounted(() => {
  fetchAllTokenPrices();
});
